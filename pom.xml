<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.al.wa</groupId>
    <artifactId>rps-app</artifactId>
    <version>1.0.1-SNAPSHOT</version>

    <packaging>jar</packaging>

    <name>Rock Paper Scissors</name>
    <description>Rock Paper Scissors demo application.</description>

    <scm>
        <url>https://github.com/${github.repo.username}/${github.repo.name}</url>
        <connection>scm:git:https://github.com/${github.repo.username}/${github.repo.name}.git</connection>
        <developerConnection>scm:git:https://github.com/${github.repo.username}/${github.repo.name}.git</developerConnection>
        <tag>HEAD</tag>
    </scm>

    <licenses>
        <license>
            <name>The GNU General Public License, Version 3</name>
            <url>https://www.gnu.org/licenses/gpl-3.0.txt</url>
        </license>
    </licenses>

    <properties>
        <!-- General properties -->
        <java.version>11</java.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!-- Dependencies -->
        <logback-classic.version>1.3.0-alpha10</logback-classic.version>
        <lombok.version>1.18.20</lombok.version>
        <junit.jupiter.version>5.8.2</junit.jupiter.version>
        <mockito.version>3.9.0</mockito.version>
        <!-- Plugins -->
        <maven.jar.version>2.4</maven.jar.version>
        <maven-dependency-plugin.version>3.2.0</maven-dependency-plugin.version>
        <maven-compiler-plugin.version>3.6.0</maven-compiler-plugin.version>
        <maven-surefire-plugin.version>3.0.0-M5</maven-surefire-plugin.version>
        <maven-site-plugin.version>3.8.2</maven-site-plugin.version>
        <maven-project-info-reports-plugin.version>3.1.2</maven-project-info-reports-plugin.version>
        <jacoco-maven-plugin.version>0.8.7</jacoco-maven-plugin.version>
        <maven-enforcer-plugin.version>3.0.0-M3</maven-enforcer-plugin.version>
        <jib-maven-plugin.version>3.1.4</jib-maven-plugin.version>
        <maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>
        <site-maven-plugin.version>0.12</site-maven-plugin.version>
        <maven-release-plugin.version>3.0.0-M1</maven-release-plugin.version>
        <!-- Surefire plugin properties -->
        <surefire.forkCount>2</surefire.forkCount>
        <surefire.reuseForks>true</surefire.reuseForks>
        <surefire.parallel.execution>methods</surefire.parallel.execution>
        <!-- Maven Jar plugin properties -->
        <classpath-directory-prefix>dependency-jars</classpath-directory-prefix>
        <!-- Docker Hub properties -->
        <docker-hub-user-id>hokushin</docker-hub-user-id>
        <base.image.digest>@sha256:6c17f58746695a08b07b9bffd69bb6c46ff9380fdb974529135ad0d0167fd715</base.image.digest>
        <base.image.path>openjdk:11-jdk-slim</base.image.path>
        <image.path>${docker-hub-user-id}/${execjar.name}</image.path>
        <!-- Sonar properties -->
        <sonar.organization>${github.repo.username}</sonar.organization>
        <sonar.host.url>https://sonarcloud.io</sonar.host.url>
        <sonar.coverage.exclusions>
            **/RpsGame.java
        </sonar.coverage.exclusions>
        <sonar.coverage.jacoco.xmlReportPaths>
            ${project.build.directory}/site/jacoco/jacoco.xml
        </sonar.coverage.jacoco.xmlReportPaths>
        <!-- CircleCI properties -->
        <build.number>000</build.number>
        <commit.hash>local-build</commit.hash>
        <build.user>local-build</build.user>
        <build.repo>local-build</build.repo>
        <circle.workflow>local-build</circle.workflow>
        <!-- GitHub properties -->
        <!-- Github server corresponds to entry in ~/.m2/settings.xml -->
        <github.global.server>github</github.global.server>
        <!-- GitHub repo name -->
        <github.repo.name>rps</github.repo.name>
        <!-- GitHub account username -->
        <github.repo.username>hokushin118</github.repo.username>
        <!-- Branch for storing deployed artifacts, does not need to exist, will be created by plugin -->
        <github-staging-repo>nexus-repo</github-staging-repo>
        <!-- Name of the project -->
        <execjar.name>rps-app</execjar.name>
    </properties>

    <profiles>
        <!-- Profile for running application on development environment -->
        <profile>
            <id>dev</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <maven.test.skip>false</maven.test.skip>
                <jacoco.skip>false</jacoco.skip>
                <jib.skip>true</jib.skip>
                <site-maven-plugin.skip>false</site-maven-plugin.skip>
            </properties>
            <build>
                <plugins>
                    <!-- Plugin for deploying artifacts -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-deploy-plugin</artifactId>
                        <version>${maven-deploy-plugin.version}</version>
                        <!-- For artifact deployment in the nexus-repo branch of the GitHub repository -->
                        <configuration>
                            <!-- Deploying artifact to the target/nexus-repo folder -->
                            <altDeploymentRepository>
                                internal.repo::default::file://${project.build.directory}/${github-staging-repo}
                            </altDeploymentRepository>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- Profile for running application on production environment -->
        <profile>
            <id>prod</id>
            <properties>
                <maven.test.skip>true</maven.test.skip>
                <jacoco.skip>true</jacoco.skip>
                <jib.skip>true</jib.skip>
                <site-maven-plugin.skip>false</site-maven-plugin.skip>
            </properties>
            <build>
                <plugins>
                    <!-- Plugin for deploying artifacts -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-deploy-plugin</artifactId>
                        <version>${maven-deploy-plugin.version}</version>
                        <!-- For artifact deployment in the nexus-repo branch of the GitHub repository -->
                        <configuration>
                            <!-- Deploying artifact to the target/nexus-repo folder -->
                            <altDeploymentRepository>
                                internal.repo::default::file://${project.build.directory}/${github-staging-repo}
                            </altDeploymentRepository>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- Profile for deploying artifacts to the Docker Hub repository -->
        <profile>
            <id>docker</id>
            <properties>
                <maven.test.skip>true</maven.test.skip>
                <jacoco.skip>true</jacoco.skip>
                <jib.skip>false</jib.skip>
                <site-maven-plugin.skip>true</site-maven-plugin.skip>
            </properties>
            <build>
                <plugins>
                    <!-- Plugin for deploying artifacts -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-deploy-plugin</artifactId>
                        <version>${maven-deploy-plugin.version}</version>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- Profile for deploying artifacts to the GitHub Packages repository -->
        <profile>
            <id>github</id>
            <properties>
                <maven.test.skip>true</maven.test.skip>
                <jacoco.skip>true</jacoco.skip>
                <jib.skip>true</jib.skip>
                <site-maven-plugin.skip>true</site-maven-plugin.skip>
            </properties>
            <build>
                <plugins>
                    <!-- Plugin for deploying artifacts -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-deploy-plugin</artifactId>
                        <version>${maven-deploy-plugin.version}</version>
                    </plugin>
                </plugins>
            </build>
            <!--
            For artifact deployment in the GitHub Packages repository
            https://docs.github.com/en/packages/learn-github-packages/introduction-to-github-packages
            -->
            <distributionManagement>
                <repository>
                    <id>github</id>
                    <name>GitHub Packages</name>
                    <url>https://maven.pkg.github.com/${github.repo.username}/${github.repo.name}</url>
                </repository>
            </distributionManagement>
        </profile>
    </profiles>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.junit</groupId>
                <artifactId>junit-bom</artifactId>
                <version>${junit.jupiter.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- Logging with Logback -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback-classic.version}</version>
        </dependency>

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- JUnit 5 -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Mockito -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <!-- Final name of the artifact -->
        <finalName>${execjar.name}</finalName>

        <plugins>
            <!-- Plugin for compiling the source of the project -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>

            <!-- Plugin for generating JUnit tests reports -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <!-- Additional parameters to be passed to the forked JVM process -->
                    <argLine>
                        --illegal-access=permit
                    </argLine>
                    <testFailureIgnore>true</testFailureIgnore>
                    <!-- Maximum number of JVM processes that plugin will spawn concurrently to execute the tests -->
                    <forkCount>${surefire.forkCount}</forkCount>
                    <!-- Determines whether to terminate the spawned process after one test class or reuse it -->
                    <reuseForks>${surefire.reuseForks}</reuseForks>
                    <!-- Set parallel method execution -->
                    <parallel>${surefire.parallel.execution}</parallel>
                    <argLine>${surefireArgLine}</argLine>
                </configuration>
            </plugin>

            <!-- Plugin for generating a site for the project -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>${maven-site-plugin.version}</version>
            </plugin>

            <!-- Plugin for generating reports information about the project -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>${maven-project-info-reports-plugin.version}</version>
            </plugin>

            <!-- Plugin for generating jar executable -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven.jar.version}</version>
                <configuration>
                    <archive>
                        <manifest>
                            <!-- Add class path entry to the manifest -->
                            <addClasspath>true</addClasspath>
                            <!-- Jar file entry point -->
                            <mainClass>com.al.wa.RpsGame</mainClass>
                            <!-- Defining a classpath directory prefix -->
                            <classpathPrefix>${classpath-directory-prefix}/</classpathPrefix>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>

            <!-- Plugin for coping project dependencies -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>${maven-dependency-plugin.version}</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <!-- Exclude Junit, we need runtime dependencies only -->
                            <includeScope>runtime</includeScope>
                            <outputDirectory>${project.build.directory}/${classpath-directory-prefix}/</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- JaCoCo plugin for generating test coverage reports -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco-maven-plugin.version}</version>
                <configuration>
                    <excludes>
                        <!-- Exclude RpsGame class from code coverage -->
                        <exclude>com/al/wa/RpsGame.class</exclude>
                    </excludes>
                </configuration>
                <executions>
                    <!--
                      Prepares the property pointing to the JaCoCo runtime agent which
                      is passed as VM argument when Maven the Surefire plugin is executed
                    -->
                    <execution>
                        <id>default-prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <!--Sets the path to the file which contains the execution data -->
                            <destFile>${project.build.directory}/coverage-reports/jacoco.exec</destFile>
                            <!-- Sets the name of the property containing the settings for JaCoCo runtime agent -->
                            <propertyName>surefireArgLine</propertyName>
                        </configuration>
                    </execution>
                    <execution>
                        <id>default-report</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <dataFile>${project.build.directory}/coverage-reports/jacoco.exec</dataFile>
                            <!-- Sets the output directory for the code coverage report. -->
                            <outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>default-check</id>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <rule>
                                    <element>BUNDLE</element>
                                    <limits>
                                        <limit>
                                            <counter>COMPLEXITY</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>0.70</minimum>
                                        </limit>
                                    </limits>
                                </rule>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Plugin for controlling certain environmental constraints such as Maven version, JDK version etc -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>${maven-enforcer-plugin.version}</version>
                <executions>
                    <execution>
                        <id>enforce-versions</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>[${maven-compiler-plugin.version},)</version>
                                    <message>Invalid Maven version. It should, at least, be
                                        ${maven-compiler-plugin.version}
                                    </message>
                                </requireMavenVersion>
                                <requireJavaVersion>
                                    <version>[${java.version},)</version>
                                    <message>Invalid Jave version. It should, at least, be
                                        ${java.version}
                                    </message>
                                </requireJavaVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Plugin for building Docker image -->
            <plugin>
                <groupId>com.google.cloud.tools</groupId>
                <artifactId>jib-maven-plugin</artifactId>
                <version>${jib-maven-plugin.version}</version>
                <configuration>
                    <!-- Base image (OpenJDK 11) with digest specification -->
                    <from>
                        <image>${base.image.path}${base.image.digest}</image>
                    </from>
                    <to>
                        <!-- Path to your Docker registry repository -->
                        <image>${image.path}</image>
                        <!-- Tags of the image -->
                        <tags>
                            <tag>${project.version}-b${build.number}</tag>
                            <tag>latest</tag>
                        </tags>
                    </to>
                    <container>
                        <!-- Startup flags to be passed to the JVM -->
                        <jvmFlags>
                            <jvmFlag>-Xms512m</jvmFlag>
                            <jvmFlag>-Xmx512m</jvmFlag>
                            <jvmFlag>-Dfile.encoding=utf-8</jvmFlag>
                            <!-- CircleCI env variables -->
                            <jvmFlag>-Dcircle_build_num=${build.number}</jvmFlag>
                            <jvmFlag>-Dcircle_commit=${commit.hash}</jvmFlag>
                            <jvmFlag>-Dcircle_user=${build.user}</jvmFlag>
                            <jvmFlag>-Dcircle_repo=${build.repo}</jvmFlag>
                            <jvmFlag>-Dcircle_workflow_guid=${circle.workflow}</jvmFlag>
                        </jvmFlags>
                        <volumes>
                            <volume>/tmp</volume>
                        </volumes>
                        <!-- Main class of the application -->
                        <mainClass>com.al.wa.RpsGame</mainClass>
                        <!-- Non-root user -->
                        <user>nobody</user>
                        <!-- Image labeling -->
                        <labels>
                            <mvn.build.version>${project.version}</mvn.build.version>
                        </labels>
                    </container>
                    <allowInsecureRegistries>true</allowInsecureRegistries>
                </configuration>
                <executions>
                    <!-- Binding jib:build to package lifecycle -->
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Plugin for integration with GitHub -->
            <plugin>
                <groupId>com.github.github</groupId>
                <artifactId>site-maven-plugin</artifactId>
                <version>${site-maven-plugin.version}</version>
                <configuration>
                    <skip>${site-maven-plugin.skip}</skip>
                    <!-- Git commit message -->
                    <message>Maven artifacts for ${project.version}</message>
                    <!-- Disable webpage processing -->
                    <noJekyll>true</noJekyll>
                    <!-- Matches distribution management repository url above -->
                    <outputDirectory>${project.build.directory}/${github-staging-repo}</outputDirectory>
                    <!-- Remote branch (that is used as Nexus OSS repo) name -->
                    <branch>refs/heads/${github-staging-repo}</branch>
                    <!-- If you remove this then the old artifact will be removed and new
                          one will replace. But with the merge tag you can just release by changing the version -->
                    <!--                    <merge>true</merge>-->
                    <includes>
                        <include>**/*</include>
                    </includes>
                    <!-- GitHub repo name -->
                    <repositoryName>${github.repo.name}</repositoryName>
                    <!-- GitHub repo username  -->
                    <repositoryOwner>${github.repo.username}</repositoryOwner>
                </configuration>
                <executions>
                    <!-- Binding site-maven-plugin:site to deploy lifecycle -->
                    <execution>
                        <phase>deploy</phase>
                        <goals>
                            <goal>site</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Plugin for making project Release -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>${maven-release-plugin.version}</version>
                <configuration>
                    <!-- Path to the repo Tags folder -->
                    <tagBase>https://github.com/${github.repo.username}/${github.repo.name}/tags</tagBase>
                    <!-- Path to the repo Branches folder -->
                    <branchBase>https://github.com/${github.repo.username}/${github.repo.name}/branches</branchBase>
                    <tagNameFormat>v@{project.version}</tagNameFormat>
                    <autoVersionSubmodules>true</autoVersionSubmodules>
                    <!-- Tasks to be run before creating tag -->
                    <preparationGoals>clean verify</preparationGoals>
                    <releaseProfiles>github</releaseProfiles>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <!--
    For artifact deployment in the nexus-repo branch of the GitHub repository
    mvn deploy
    -->
    <distributionManagement>
        <repository>
            <id>internal.repo</id>
            <name>Temporary Staging Repository</name>
            <url>file://${project.build.directory}/${github.repo.username}</url>
        </repository>
    </distributionManagement>
</project>
